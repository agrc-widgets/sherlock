{"version":3,"sources":["../_src/providers/_ProviderMixin.js"],"names":["define","Evented","declare","_deferred","_getOutFields","outFields","searchField","contextField","console","log","arguments","addField","fld","indexOf","push","_getSearchClause","text","_getFeatureClause","searchValue","contextValue","statement","length","cancelPendingRequests","cancel"],"mappings":"AAAAA,OAAO,CACH,cADG,EAEH,oBAFG,CAAP,EAGG,UACCC,OADD,EAECC,OAFD,EAGD;AACE,WAAOA,QAAQ,CAACD,OAAD,CAAR,EAAmB;AACtB;;;;AAIAE,mBAAW,IALW;;AAOtB;;;;;;;AAOAC,uBAAe,uBAAUC,SAAV,EAAqBC,WAArB,EAAkCC,YAAlC,EAAgD;AAC3DC,oBAAQC,GAAR,CAAY,iDAAZ,EAA+DC,SAA/D;;AAEAL,wBAAYA,aAAa,EAAzB;;AAEA;AACA,gBAAIA,UAAU,CAAV,MAAiB,GAArB,EAA0B;AACtB,uBAAOA,SAAP;AACH;;AAED,gBAAIM,WAAW,SAAXA,QAAW,CAAUC,GAAV,EAAe;AAC1B,oBAAIA,OAAOP,UAAUQ,OAAV,CAAkBD,GAAlB,MAA2B,CAAC,CAAvC,EAA0C;AACtCP,8BAAUS,IAAV,CAAeF,GAAf;AACH;AACJ,aAJD;AAKAD,qBAASL,WAAT;AACAK,qBAASJ,YAAT;;AAEA,mBAAOF,SAAP;AACH,SAjCqB;AAkCtB;;;;;AAKAU,0BAAkB,0BAAUC,IAAV,EAAgB;AAC9BR,oBAAQC,GAAR,CAAY,oDAAZ,EAAkEC,SAAlE;;AAEA,mBAAO,WAAW,KAAKJ,WAAhB,GAA8B,iBAA9B,GAAkDU,IAAlD,GAAyD,MAAhE;AACH,SA3CqB;AA4CtB;;;;;;AAMAC,2BAAmB,2BAAUC,WAAV,EAAuBC,YAAvB,EAAqC;AACpD,gBAAIC,YAAY,KAAKd,WAAL,GAAmB,OAAnB,GAA6BY,WAA7B,GAA2C,IAA3D;AACA,gBAAI,KAAKX,YAAT,EAAuB;AACnB,oBAAIY,gBAAgBA,aAAaE,MAAb,GAAsB,CAA1C,EAA6C;AACzCD,iCAAa,UAAU,KAAKb,YAAf,GAA8B,OAA9B,GAAwCY,YAAxC,GAAuD,IAApE;AACH,iBAFD,MAEO;AACHC,iCAAa,UAAU,KAAKb,YAAf,GAA8B,UAA3C;AACH;AACJ;;AAED,mBAAOa,SAAP;AACH,SA7DqB;AA8DtB;;;AAGAE,+BAAuB,iCAAY;AAC/Bd,oBAAQC,GAAR,CAAY,yDAAZ,EAAuEC,SAAvE;;AAEA,gBAAI,KAAKP,SAAT,EAAoB;AAChB,qBAAKA,SAAL,CAAeoB,MAAf;AACH;AACJ;AAvEqB,KAAnB,CAAP;AAyEH,CAhFD","file":"_ProviderMixin.js","sourcesContent":["define([\n    'dojo/Evented',\n    'dojo/_base/declare'\n], function (\n    Evented,\n    declare\n) {\n    return declare([Evented], {\n        /**\n         * @property {Deferred} _deferred - The deferred returned from the search for the provider\n         * @private\n         */\n        _deferred: null,\n\n        /**\n         * Builds the outFields list taking into account the search and context fields\n         * @private\n         * @param {string[]} outFields\n         * @param {string} searchField\n         * @param {string} contextField\n         */\n        _getOutFields: function (outFields, searchField, contextField) {\n            console.log('sherlock/providers/_ProviderMixin:_getOutFields', arguments);\n\n            outFields = outFields || [];\n\n            // don't mess with '*'\n            if (outFields[0] === '*') {\n                return outFields;\n            }\n\n            var addField = function (fld) {\n                if (fld && outFields.indexOf(fld) === -1) {\n                    outFields.push(fld);\n                }\n            };\n            addField(searchField);\n            addField(contextField);\n\n            return outFields;\n        },\n        /**\n         * Gets the query that will return features matching the text\n         * @private\n         * @param {string} text - The text to search on\n         */\n        _getSearchClause: function (text) {\n            console.log('sherlock.providers._ProviderMixin:_getSearchClause', arguments);\n\n            return 'UPPER(' + this.searchField + ') LIKE UPPER(\\'' + text + '%\\')';\n        },\n        /**\n         * Gets the query that will return the specific feature matching the values\n         * @private\n         * @param {string} searchValue\n         * @param {string} [contextValue]\n         */\n        _getFeatureClause: function (searchValue, contextValue) {\n            var statement = this.searchField + ' = \\'' + searchValue + '\\'';\n            if (this.contextField) {\n                if (contextValue && contextValue.length > 0) {\n                    statement += ' AND ' + this.contextField + ' = \\'' + contextValue + '\\'';\n                } else {\n                    statement += ' AND ' + this.contextField + ' IS NULL';\n                }\n            }\n\n            return statement;\n        },\n        /**\n         * Cancel any pending search requests\n         */\n        cancelPendingRequests: function () {\n            console.log('sherlock.providers._ProviderMixin:cancelPendingRequests', arguments);\n\n            if (this._deferred) {\n                this._deferred.cancel();\n            }\n        }\n    });\n});\n"]}