{"version":3,"sources":["../_src/providers/MapService.js"],"names":["define","declare","QueryTask","Query","_ProviderMixin","defaultWkid","searchField","contextField","_query","_queryTask","constructor","url","options","console","log","arguments","outFields","token","returnGeometry","_getOutFields","wkid","outSpatialReference","search","searchString","where","_getSearchClause","_deferred","execute","then","handleQueryTaskResponse","featureSet","features","handleQueryTaskError","er","emit","bind","getFeature","searchValue","contextValue","_getFeatureClause"],"mappings":"AAAAA,OAAO,CACH,oBADG,EAGH,sBAHG,EAIH,0BAJG,EAMH,mCANG,CAAP,EAOG,UACCC,OADD,EAGCC,SAHD,EAICC,KAJD,EAMCC,cAND,EAOD;AACE,QAAIC,cAAc,IAAlB;;AAEA,WAAOJ,QAAQ,CAACG,cAAD,CAAR,EAA0B;AAC7B;;;AAGAE,qBAAa,EAJgB;;AAM7B;;;AAGAC,sBAAc,IATe;;AAW7B;;;;AAIAC,gBAAQ,IAfqB;;AAiB7B;;;;AAIAC,oBAAY,IArBiB;;AAuB7B;;;;;;;;;;;;;;AAcAC,qBAAa,qBAAUC,GAAV,EAAeL,WAAf,EAA4BM,OAA5B,EAAqC;AAC9CC,oBAAQC,GAAR,CAAY,2CAAZ,EAAyDC,SAAzD;;AAEA,iBAAKT,WAAL,GAAmBA,WAAnB;AACA,gBAAIU,SAAJ;AACA,gBAAIJ,OAAJ,EAAa;AACT,qBAAKL,YAAL,GAAoBK,QAAQL,YAA5B;AACAS,4BAAYJ,QAAQI,SAApB;AACA;AACA,oBAAIJ,QAAQK,KAAZ,EAAmB;AACfN,2BAAO,aAAa,KAAKM,KAAzB;AACH;AACJ;;AAED,iBAAKT,MAAL,GAAc,IAAIL,KAAJ,EAAd;AACA,iBAAKK,MAAL,CAAYU,cAAZ,GAA6B,KAA7B;AACA,iBAAKV,MAAL,CAAYQ,SAAZ,GAAwB,KAAKG,aAAL,CAAmBH,SAAnB,EAA8B,KAAKT,YAAnC,EAAiD,KAAKD,WAAtD,CAAxB;AACA,gBAAIc,OAAOR,QAAQQ,IAAR,IAAgBf,WAA3B;AACA,iBAAKG,MAAL,CAAYa,mBAAZ,GAAkC,EAAED,MAAMA,IAAR,EAAlC;;AAEA,iBAAKX,UAAL,GAAkB,IAAIP,SAAJ,CAAcS,GAAd,CAAlB;AACH,SA1D4B;AA2D7B;;;;;AAKAW,gBAAQ,gBAAUC,YAAV,EAAwB;AAC5BV,oBAAQC,GAAR,CAAY,sCAAZ,EAAoDC,SAApD;;AAEA,iBAAKP,MAAL,CAAYU,cAAZ,GAA6B,KAA7B;AACA,iBAAKV,MAAL,CAAYgB,KAAZ,GAAoB,KAAKC,gBAAL,CAAsBF,YAAtB,CAApB;;AAEA,iBAAKG,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,OAAhB,CAAwB,KAAKnB,MAA7B,EAAqCoB,IAArC,CACb,SAASC,uBAAT,CAAiCC,UAAjC,EAA6C;AACzC,uBAAOA,WAAWC,QAAlB;AACH,aAHY,EAIb,SAASC,oBAAT,CAA8BC,EAA9B,EAAkC;AAC9B,qBAAKC,IAAL,CAAU,OAAV,EAAmBD,EAAnB;AACH,aAFD,CAEEE,IAFF,CAEO,IAFP,CAJa,CAAjB;;AASA,mBAAO,KAAKT,SAAZ;AACH,SAhF4B;AAiF7B;;;;;;AAMAU,oBAAY,oBAAUC,WAAV,EAAuBC,YAAvB,EAAqC;AAC7CzB,oBAAQC,GAAR,CAAY,0CAAZ,EAAwDC,SAAxD;;AAEA,iBAAKP,MAAL,CAAYU,cAAZ,GAA6B,IAA7B;AACA,iBAAKV,MAAL,CAAYgB,KAAZ,GAAoB,KAAKe,iBAAL,CAAuBF,WAAvB,EAAoCC,YAApC,CAApB;;AAEA,iBAAKZ,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,OAAhB,CAAwB,KAAKnB,MAA7B,EAAqCoB,IAArC,CAA0C,SAASC,uBAAT,CAAiCC,UAAjC,EAA6C;AACpG,uBAAOA,WAAWC,QAAlB;AACH,aAFgB,CAAjB;;AAIA,mBAAO,KAAKL,SAAZ;AACH;AAlG4B,KAA1B,CAAP;AAoGH,CArHD","file":"MapService.js","sourcesContent":["define([\n    'dojo/_base/declare',\n\n    'esri/tasks/QueryTask',\n    'esri/tasks/support/Query',\n\n    'sherlock/providers/_ProviderMixin'\n], function (\n    declare,\n\n    QueryTask,\n    Query,\n\n    _ProviderMixin\n) {\n    var defaultWkid = 3857;\n\n    return declare([_ProviderMixin], {\n        /**\n         * @property {string} searchField - The Field name that is to be searched.\n         */\n        searchField: '',\n\n        /**\n         * @property {string} contextField - The context field\n         */\n        contextField: null,\n\n        /**\n         * @property {Query} _query\n         * @private\n         */\n        _query: null,\n\n        /**\n         * @property {QueryTask} _queryTask\n         * @private\n         */\n        _queryTask: null,\n\n        /**\n         * A provider class for Sherlock that searches a layer within a mapservice.\n         * @name MapService\n         * @param {string} url - The URL to the map service layer that you want to search.\n         * e.g. http://mapserv.utah.gov/arcgis/rest/services/SomeService/MapServer/1\n         * @param {string} searchField - The name of the field that you want to search on.\n         * @param options {object}\n         * @param {string[]} [options.outFields] - A list of the fields that you want returned from the search.\n         * If undefined then the searchField and contextField (if provided) will be used.\n         * @param {string} [options.contextField] - A second field to display in the results table to\n         * give context to the results in case of duplicate results.\n         * @param {string} [options.token] - Token for working with secured services\n         * @param {number} [options.wkid] - WKID for spatial reference. Defaults to 3857.\n         */\n        constructor: function (url, searchField, options) {\n            console.log('sherlock.providers.MapService:constructor', arguments);\n\n            this.searchField = searchField;\n            var outFields;\n            if (options) {\n                this.contextField = options.contextField;\n                outFields = options.outFields;\n                // add token for secured services\n                if (options.token) {\n                    url += '/?token=' + this.token;\n                }\n            }\n\n            this._query = new Query();\n            this._query.returnGeometry = false;\n            this._query.outFields = this._getOutFields(outFields, this.contextField, this.searchField);\n            var wkid = options.wkid || defaultWkid;\n            this._query.outSpatialReference = { wkid: wkid };\n\n            this._queryTask = new QueryTask(url);\n        },\n        /**\n         * Initiates a search for features\n         * @param {string} searchString - The text to search for\n         * @returns {Deferred}\n         */\n        search: function (searchString) {\n            console.log('sherlock.providers.MapService:search', arguments);\n\n            this._query.returnGeometry = false;\n            this._query.where = this._getSearchClause(searchString);\n\n            this._deferred = this._queryTask.execute(this._query).then(\n                function handleQueryTaskResponse(featureSet) {\n                    return featureSet.features;\n                },\n                function handleQueryTaskError(er) {\n                    this.emit('error', er);\n                }.bind(this)\n            );\n\n            return this._deferred;\n        },\n        /**\n         * Queries for the geometry of a specific feature or select of features matching the search criteria\n         * @param {string} searchValue - The value of the data in the search field of the feature that you want\n         * @param {string} [contextValue] - The value of the data in the context field of the feature that you want\n         * @returns {Promise} - A promise that resolves with a list of matching features\n         */\n        getFeature: function (searchValue, contextValue) {\n            console.log('sherlock.providers.MapService:getFeature', arguments);\n\n            this._query.returnGeometry = true;\n            this._query.where = this._getFeatureClause(searchValue, contextValue);\n\n            this._deferred = this._queryTask.execute(this._query).then(function handleQueryTaskResponse(featureSet) {\n                return featureSet.features;\n            });\n\n            return this._deferred;\n        }\n    });\n});\n"]}