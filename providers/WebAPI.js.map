{"version":3,"sources":["../_src/providers/WebAPI.js"],"names":["define","WebAPI","declare","Point","Polygon","Polyline","Graphic","_ProviderMixin","defaultWkid","geometryClasses","point","polygon","polyline","searchLayer","searchField","contextField","outFields","constructor","apiKey","options","console","log","arguments","wkid","_getOutFields","_webApi","search","searchString","_deferred","predicate","_getSearchClause","spatialReference","getFeature","searchValue","contextValue","concat","_getFeatureClause","then","handleFeatureQuery","features","map","convertToGraphic","feature","geometry","type","attributes"],"mappings":"AAAAA,OAAO,CACH,gBADG,EAGH,oBAHG,EAKH,qBALG,EAMH,uBANG,EAOH,wBAPG,EAQH,cARG,EAUH,mCAVG,CAAP,EAWG,UACCC,MADD,EAGCC,OAHD,EAKCC,KALD,EAMCC,OAND,EAOCC,QAPD,EAQCC,OARD,EAUCC,cAVD,EAWD;AACE,QAAIC,cAAc,IAAlB;AACA,QAAIC,kBAAkB;AAClBC,eAAOP,KADW;AAElBQ,iBAASP,OAFS;AAGlBQ,kBAAUP;AAHQ,KAAtB;;AAMA,WAAOH,QAAQ,CAACK,cAAD,CAAR,EAA0B;AAC7B;;;AAGAM,qBAAa,EAJgB;;AAM7B;;;AAGAC,qBAAa,EATgB;;AAW7B;;;AAGAC,sBAAc,IAde;;AAgB7B;;;AAGAC,mBAAW,EAnBkB;;AAqB7B;;;;;;;;;;;;;;AAcAC,qBAAa,qBAAUC,MAAV,EAAkBL,WAAlB,EAA+BC,WAA/B,EAA4CK,OAA5C,EAAqD;AAC9DC,oBAAQC,GAAR,CAAY,uCAAZ,EAAqDC,SAArD;;AAEA,iBAAKT,WAAL,GAAmBA,WAAnB;AACA,iBAAKC,WAAL,GAAmBA,WAAnB;AACA,gBAAIK,OAAJ,EAAa;AACT,qBAAKI,IAAL,GAAYJ,QAAQI,IAAR,IAAgBf,WAA5B;AACA,qBAAKO,YAAL,GAAoBI,QAAQJ,YAA5B;AACA,qBAAKC,SAAL,GAAiB,KAAKQ,aAAL,CAAmBL,QAAQH,SAA3B,EAAsC,KAAKF,WAA3C,EAAwD,KAAKC,YAA7D,CAAjB;AACH,aAJD,MAIO;AACH,qBAAKQ,IAAL,GAAYf,WAAZ;AACH;AACD,iBAAKQ,SAAL,GAAiB,KAAKQ,aAAL,CAAmB,IAAnB,EAAyB,KAAKV,WAA9B,EAA2C,KAAKC,YAAhD,CAAjB;AACA,iBAAKU,OAAL,GAAe,IAAIxB,MAAJ,CAAW;AACtBiB,wBAAQA;AADc,aAAX,CAAf;AAGH,SAnD4B;AAoD7B;;;;;AAKAQ,gBAAQ,gBAAUC,YAAV,EAAwB;AAC5BP,oBAAQC,GAAR,CAAY,kCAAZ,EAAgDC,SAAhD;;AAEA,iBAAKM,SAAL,GAAiB,KAAKH,OAAL,CAAaC,MAAb,CAAoB,KAAKb,WAAzB,EAAsC,KAAKG,SAA3C,EAAsD;AACnEa,2BAAW,KAAKC,gBAAL,CAAsBH,YAAtB,CADwD;AAEnEI,kCAAkB,KAAKR;AAF4C,aAAtD,CAAjB;;AAKA,mBAAO,KAAKK,SAAZ;AACH,SAlE4B;AAmE7B;;;;;;AAMAI,oBAAY,oBAAUC,WAAV,EAAuBC,YAAvB,EAAqC;AAC7Cd,oBAAQC,GAAR,CAAY,sCAAZ,EAAoDC,SAApD;;AAEA,iBAAKM,SAAL,GAAiB,KAAKH,OAAL,CAAaC,MAAb,CAAoB,KAAKb,WAAzB,EAAsC,KAAKG,SAAL,CAAemB,MAAf,CAAsB,QAAtB,CAAtC,EAAuE;AACpFN,2BAAW,KAAKO,iBAAL,CAAuBH,WAAvB,EAAoCC,YAApC,CADyE;AAEpFH,kCAAkB,KAAKR;AAF6D,aAAvE,EAGdc,IAHc,CAGT,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAC1C,uBAAOA,SAASC,GAAT,CAAa,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AACnD,2BAAO,IAAIpC,OAAJ,CAAY;AACfqC,kCAAU,IAAIlC,gBAAgBiC,QAAQC,QAAR,CAAiBC,IAAjC,CAAJ,CAA2CF,QAAQC,QAAnD,CADK;AAEfE,oCAAYH,QAAQG;AAFL,qBAAZ,CAAP;AAIH,iBALM,CAAP;AAMH,aAVgB,CAAjB;;AAYA,mBAAO,KAAKjB,SAAZ;AACH;AAzF4B,KAA1B,CAAP;AA2FH,CAzHD","file":"WebAPI.js","sourcesContent":["define([\n    'helpers/WebAPI',\n\n    'dojo/_base/declare',\n\n    'esri/geometry/Point',\n    'esri/geometry/Polygon',\n    'esri/geometry/Polyline',\n    'esri/Graphic',\n\n    'sherlock/providers/_ProviderMixin'\n], function (\n    WebAPI,\n\n    declare,\n\n    Point,\n    Polygon,\n    Polyline,\n    Graphic,\n\n    _ProviderMixin\n) {\n    var defaultWkid = 3857;\n    var geometryClasses = {\n        point: Point,\n        polygon: Polygon,\n        polyline: Polyline\n    };\n\n    return declare([_ProviderMixin], {\n        /**\n         * @property {string} searchLayer - See constructor parameter\n         */\n        searchLayer: '',\n\n        /**\n         * @property {string} searchField - See constructor parameter\n         */\n        searchField: '',\n\n        /**\n         * @property {string} contextField - See constructor parameter\n         */\n        contextField: null,\n\n        /**\n         * @property {string} outFields - See constructor parameter\n         */\n        outFields: '',\n\n        /**\n         * A provider class for Sherlock that uses AGRC's web api (api.mapserv.utah.gov) to search\n         * feature classes within the SGID.\n         * @name WebAPI\n         * @param {string} apiKey - You api key (obtained from api.mapserv.utah.gov)\n         * @param {string} searchLayer - Fully qualified feature class name eg: SGID10.Boundaries.Counties\n         * @param {string} searchField - The name of the field that you want the search based on\n         * @param options {object}\n         * @param {string[]} [options.outFields] - A list of the fields that you want returned from the search.\n         * If undefined then the searchField and contextField (if provided) will be used.\n         * @param {string} [options.contextField] - A second field to display in the results table to\n         * give context to the results in case of duplicate results.\n         * @param {number} [options.wkid=3857] - The well known id of the spatial reference that you are working in.\n         */\n        constructor: function (apiKey, searchLayer, searchField, options) {\n            console.log('sherlock.providers.WebAPI:constructor', arguments);\n\n            this.searchLayer = searchLayer;\n            this.searchField = searchField;\n            if (options) {\n                this.wkid = options.wkid || defaultWkid;\n                this.contextField = options.contextField;\n                this.outFields = this._getOutFields(options.outFields, this.searchField, this.contextField);\n            } else {\n                this.wkid = defaultWkid;\n            }\n            this.outFields = this._getOutFields(null, this.searchField, this.contextField);\n            this._webApi = new WebAPI({\n                apiKey: apiKey\n            });\n        },\n        /**\n         * Initiates a search for features\n         * @param {string} searchString - The text to search for\n         * @returns {Promise} - A promise that resolves with a list of matching features\n         */\n        search: function (searchString) {\n            console.log('sherlock.providers.WebAPI:search', arguments);\n\n            this._deferred = this._webApi.search(this.searchLayer, this.outFields, {\n                predicate: this._getSearchClause(searchString),\n                spatialReference: this.wkid\n            });\n\n            return this._deferred;\n        },\n        /**\n         * Queries for the geometry of a specific feature or select of features matching the search criteria\n         * @param {string} searchValue - The value of the data in the search field of the feature that you want\n         * @param {string} [contextValue] - The value of the data in the context field of the feature that you want\n         * @returns {Promise} - A promise that resolves with a list of matching features\n         */\n        getFeature: function (searchValue, contextValue) {\n            console.log('sherlock.providers.WebAPI:getFeature', arguments);\n\n            this._deferred = this._webApi.search(this.searchLayer, this.outFields.concat('shape@'), {\n                predicate: this._getFeatureClause(searchValue, contextValue),\n                spatialReference: this.wkid\n            }).then(function handleFeatureQuery(features) {\n                return features.map(function convertToGraphic(feature) {\n                    return new Graphic({\n                        geometry: new geometryClasses[feature.geometry.type](feature.geometry),\n                        attributes: feature.attributes\n                    });\n                });\n            });\n\n            return this._deferred;\n        }\n    });\n});\n"]}